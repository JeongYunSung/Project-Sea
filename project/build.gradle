apply plugin: 'org.springframework.boot'
apply plugin: "com.ewerk.gradle.plugins.querydsl"

dependencies {
    implementation project(':common')
    implementation project(':team-api')
    implementation project(':project-api')
    implementation project(':weclass-api')
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "io.eventuate.tram.core:eventuate-tram-commands:${eventuateTramVersion}"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-events:${eventuateTramVersion}"
    implementation "io.eventuate.tram.core:eventuate-tram-spring-jdbc-kafka:${eventuateTramVersion}"
    implementation "io.eventuate.tram.core:eventuate-tram-aggregate-domain-events:${eventuateTramVersion}"
    implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-participant:${eventuateTramSagasVersion}"
    implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-spring-orchestration:${eventuateTramSagasVersion}"
    implementation "io.eventuate.tram.sagas:eventuate-tram-sagas-orchestration-simple-dsl:${eventuateTramSagasVersion}"
    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
    implementation 'org.springframework.cloud:spring-cloud-starter-security'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

def queryDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = queryDir
}

sourceSets {
    main.java.srcDir queryDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}